# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ballistic')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ballistic')
    _ballistic = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ballistic', [dirname(__file__)])
        except ImportError:
            import _ballistic
            return _ballistic
        try:
            _mod = imp.load_module('_ballistic', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ballistic = swig_import_helper()
    del swig_import_helper
else:
    import _ballistic
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class param_density1d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_density1d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_density1d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["temp"] = _ballistic.param_density1d_temp_set
    __swig_getmethods__["temp"] = _ballistic.param_density1d_temp_get
    if _newclass:
        temp = _swig_property(_ballistic.param_density1d_temp_get, _ballistic.param_density1d_temp_set)
    __swig_setmethods__["EFermi"] = _ballistic.param_density1d_EFermi_set
    __swig_getmethods__["EFermi"] = _ballistic.param_density1d_EFermi_get
    if _newclass:
        EFermi = _swig_property(_ballistic.param_density1d_EFermi_get, _ballistic.param_density1d_EFermi_set)
    __swig_setmethods__["Enm"] = _ballistic.param_density1d_Enm_set
    __swig_getmethods__["Enm"] = _ballistic.param_density1d_Enm_get
    if _newclass:
        Enm = _swig_property(_ballistic.param_density1d_Enm_get, _ballistic.param_density1d_Enm_set)
    __swig_setmethods__["alphanm"] = _ballistic.param_density1d_alphanm_set
    __swig_getmethods__["alphanm"] = _ballistic.param_density1d_alphanm_get
    if _newclass:
        alphanm = _swig_property(_ballistic.param_density1d_alphanm_get, _ballistic.param_density1d_alphanm_set)
    __swig_setmethods__["emsnm"] = _ballistic.param_density1d_emsnm_set
    __swig_getmethods__["emsnm"] = _ballistic.param_density1d_emsnm_get
    if _newclass:
        emsnm = _swig_property(_ballistic.param_density1d_emsnm_get, _ballistic.param_density1d_emsnm_set)

    def __init__(self):
        this = _ballistic.new_param_density1d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ballistic.delete_param_density1d
    __del__ = lambda self: None
param_density1d_swigregister = _ballistic.param_density1d_swigregister
param_density1d_swigregister(param_density1d)

class param_density1d_all(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_density1d_all, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_density1d_all, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alpha"] = _ballistic.param_density1d_all_alpha_set
    __swig_getmethods__["alpha"] = _ballistic.param_density1d_all_alpha_get
    if _newclass:
        alpha = _swig_property(_ballistic.param_density1d_all_alpha_get, _ballistic.param_density1d_all_alpha_set)
    __swig_setmethods__["ems"] = _ballistic.param_density1d_all_ems_set
    __swig_getmethods__["ems"] = _ballistic.param_density1d_all_ems_get
    if _newclass:
        ems = _swig_property(_ballistic.param_density1d_all_ems_get, _ballistic.param_density1d_all_ems_set)
    __swig_setmethods__["temp"] = _ballistic.param_density1d_all_temp_set
    __swig_getmethods__["temp"] = _ballistic.param_density1d_all_temp_get
    if _newclass:
        temp = _swig_property(_ballistic.param_density1d_all_temp_get, _ballistic.param_density1d_all_temp_set)
    __swig_setmethods__["W1"] = _ballistic.param_density1d_all_W1_set
    __swig_getmethods__["W1"] = _ballistic.param_density1d_all_W1_get
    if _newclass:
        W1 = _swig_property(_ballistic.param_density1d_all_W1_get, _ballistic.param_density1d_all_W1_set)
    __swig_setmethods__["W2"] = _ballistic.param_density1d_all_W2_set
    __swig_getmethods__["W2"] = _ballistic.param_density1d_all_W2_get
    if _newclass:
        W2 = _swig_property(_ballistic.param_density1d_all_W2_get, _ballistic.param_density1d_all_W2_set)
    __swig_setmethods__["nmax"] = _ballistic.param_density1d_all_nmax_set
    __swig_getmethods__["nmax"] = _ballistic.param_density1d_all_nmax_get
    if _newclass:
        nmax = _swig_property(_ballistic.param_density1d_all_nmax_get, _ballistic.param_density1d_all_nmax_set)
    __swig_setmethods__["mmax"] = _ballistic.param_density1d_all_mmax_set
    __swig_getmethods__["mmax"] = _ballistic.param_density1d_all_mmax_get
    if _newclass:
        mmax = _swig_property(_ballistic.param_density1d_all_mmax_get, _ballistic.param_density1d_all_mmax_set)

    def __init__(self):
        this = _ballistic.new_param_density1d_all()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ballistic.delete_param_density1d_all
    __del__ = lambda self: None
param_density1d_all_swigregister = _ballistic.param_density1d_all_swigregister
param_density1d_all_swigregister(param_density1d_all)


def density1d_parabollic00(EFermi, Enm, ems, temp):
    return _ballistic.density1d_parabollic00(EFermi, Enm, ems, temp)
density1d_parabollic00 = _ballistic.density1d_parabollic00

def density1d_all00(EFermi, alpha, ems, temp, W1, W2, nmax, mmax):
    return _ballistic.density1d_all00(EFermi, alpha, ems, temp, W1, W2, nmax, mmax)
density1d_all00 = _ballistic.density1d_all00

def density1d_all0(EFermi, p):
    return _ballistic.density1d_all0(EFermi, p)
density1d_all0 = _ballistic.density1d_all0
class param_ballistic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_ballistic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_ballistic, name)
    __repr__ = _swig_repr
    __swig_setmethods__["EFermi"] = _ballistic.param_ballistic_EFermi_set
    __swig_getmethods__["EFermi"] = _ballistic.param_ballistic_EFermi_get
    if _newclass:
        EFermi = _swig_property(_ballistic.param_ballistic_EFermi_get, _ballistic.param_ballistic_EFermi_set)
    __swig_setmethods__["VDS"] = _ballistic.param_ballistic_VDS_set
    __swig_getmethods__["VDS"] = _ballistic.param_ballistic_VDS_get
    if _newclass:
        VDS = _swig_property(_ballistic.param_ballistic_VDS_get, _ballistic.param_ballistic_VDS_set)
    __swig_setmethods__["VGS"] = _ballistic.param_ballistic_VGS_set
    __swig_getmethods__["VGS"] = _ballistic.param_ballistic_VGS_get
    if _newclass:
        VGS = _swig_property(_ballistic.param_ballistic_VGS_get, _ballistic.param_ballistic_VGS_set)
    __swig_setmethods__["alpha_D"] = _ballistic.param_ballistic_alpha_D_set
    __swig_getmethods__["alpha_D"] = _ballistic.param_ballistic_alpha_D_get
    if _newclass:
        alpha_D = _swig_property(_ballistic.param_ballistic_alpha_D_get, _ballistic.param_ballistic_alpha_D_set)
    __swig_setmethods__["alpha_G"] = _ballistic.param_ballistic_alpha_G_set
    __swig_getmethods__["alpha_G"] = _ballistic.param_ballistic_alpha_G_get
    if _newclass:
        alpha_G = _swig_property(_ballistic.param_ballistic_alpha_G_get, _ballistic.param_ballistic_alpha_G_set)
    __swig_setmethods__["Ceff"] = _ballistic.param_ballistic_Ceff_set
    __swig_getmethods__["Ceff"] = _ballistic.param_ballistic_Ceff_get
    if _newclass:
        Ceff = _swig_property(_ballistic.param_ballistic_Ceff_get, _ballistic.param_ballistic_Ceff_set)
    __swig_setmethods__["alpha"] = _ballistic.param_ballistic_alpha_set
    __swig_getmethods__["alpha"] = _ballistic.param_ballistic_alpha_get
    if _newclass:
        alpha = _swig_property(_ballistic.param_ballistic_alpha_get, _ballistic.param_ballistic_alpha_set)
    __swig_setmethods__["ems"] = _ballistic.param_ballistic_ems_set
    __swig_getmethods__["ems"] = _ballistic.param_ballistic_ems_get
    if _newclass:
        ems = _swig_property(_ballistic.param_ballistic_ems_get, _ballistic.param_ballistic_ems_set)
    __swig_setmethods__["temp"] = _ballistic.param_ballistic_temp_set
    __swig_getmethods__["temp"] = _ballistic.param_ballistic_temp_get
    if _newclass:
        temp = _swig_property(_ballistic.param_ballistic_temp_get, _ballistic.param_ballistic_temp_set)
    __swig_setmethods__["W1"] = _ballistic.param_ballistic_W1_set
    __swig_getmethods__["W1"] = _ballistic.param_ballistic_W1_get
    if _newclass:
        W1 = _swig_property(_ballistic.param_ballistic_W1_get, _ballistic.param_ballistic_W1_set)
    __swig_setmethods__["W2"] = _ballistic.param_ballistic_W2_set
    __swig_getmethods__["W2"] = _ballistic.param_ballistic_W2_get
    if _newclass:
        W2 = _swig_property(_ballistic.param_ballistic_W2_get, _ballistic.param_ballistic_W2_set)
    __swig_setmethods__["nmax"] = _ballistic.param_ballistic_nmax_set
    __swig_getmethods__["nmax"] = _ballistic.param_ballistic_nmax_get
    if _newclass:
        nmax = _swig_property(_ballistic.param_ballistic_nmax_get, _ballistic.param_ballistic_nmax_set)
    __swig_setmethods__["mmax"] = _ballistic.param_ballistic_mmax_set
    __swig_getmethods__["mmax"] = _ballistic.param_ballistic_mmax_get
    if _newclass:
        mmax = _swig_property(_ballistic.param_ballistic_mmax_get, _ballistic.param_ballistic_mmax_set)

    def __init__(self):
        this = _ballistic.new_param_ballistic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ballistic.delete_param_ballistic
    __del__ = lambda self: None
param_ballistic_swigregister = _ballistic.param_ballistic_swigregister
param_ballistic_swigregister(param_ballistic)

class param_E0(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_E0, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_E0, name)
    __repr__ = _swig_repr
    __swig_setmethods__["EFermi"] = _ballistic.param_E0_EFermi_set
    __swig_getmethods__["EFermi"] = _ballistic.param_E0_EFermi_get
    if _newclass:
        EFermi = _swig_property(_ballistic.param_E0_EFermi_get, _ballistic.param_E0_EFermi_set)
    __swig_setmethods__["VDS"] = _ballistic.param_E0_VDS_set
    __swig_getmethods__["VDS"] = _ballistic.param_E0_VDS_get
    if _newclass:
        VDS = _swig_property(_ballistic.param_E0_VDS_get, _ballistic.param_E0_VDS_set)
    __swig_setmethods__["VGS"] = _ballistic.param_E0_VGS_set
    __swig_getmethods__["VGS"] = _ballistic.param_E0_VGS_get
    if _newclass:
        VGS = _swig_property(_ballistic.param_E0_VGS_get, _ballistic.param_E0_VGS_set)
    __swig_setmethods__["alpha_D"] = _ballistic.param_E0_alpha_D_set
    __swig_getmethods__["alpha_D"] = _ballistic.param_E0_alpha_D_get
    if _newclass:
        alpha_D = _swig_property(_ballistic.param_E0_alpha_D_get, _ballistic.param_E0_alpha_D_set)
    __swig_setmethods__["alpha_G"] = _ballistic.param_E0_alpha_G_set
    __swig_getmethods__["alpha_G"] = _ballistic.param_E0_alpha_G_get
    if _newclass:
        alpha_G = _swig_property(_ballistic.param_E0_alpha_G_get, _ballistic.param_E0_alpha_G_set)
    __swig_setmethods__["Ceff"] = _ballistic.param_E0_Ceff_set
    __swig_getmethods__["Ceff"] = _ballistic.param_E0_Ceff_get
    if _newclass:
        Ceff = _swig_property(_ballistic.param_E0_Ceff_get, _ballistic.param_E0_Ceff_set)
    __swig_setmethods__["p_density1d_all"] = _ballistic.param_E0_p_density1d_all_set
    __swig_getmethods__["p_density1d_all"] = _ballistic.param_E0_p_density1d_all_get
    if _newclass:
        p_density1d_all = _swig_property(_ballistic.param_E0_p_density1d_all_get, _ballistic.param_E0_p_density1d_all_set)

    def __init__(self):
        this = _ballistic.new_param_E0()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ballistic.delete_param_E0
    __del__ = lambda self: None
param_E0_swigregister = _ballistic.param_E0_swigregister
param_E0_swigregister(param_E0)


def find_E0(p):
    return _ballistic.find_E0(p)
find_E0 = _ballistic.find_E0

def func_E00(ene0, p):
    return _ballistic.func_E00(ene0, p)
func_E00 = _ballistic.func_E00

def Cox_rect(epsOX, tOX, W1, W2):
    return _ballistic.Cox_rect(epsOX, tOX, W1, W2)
Cox_rect = _ballistic.Cox_rect

def Cc_rect(epsS, W1, W2):
    return _ballistic.Cc_rect(epsS, W1, W2)
Cc_rect = _ballistic.Cc_rect

def Cox_radial(epsOX, tOX, radius):
    return _ballistic.Cox_radial(epsOX, tOX, radius)
Cox_radial = _ballistic.Cox_radial

def param_ballistic_new():
    return _ballistic.param_ballistic_new()
param_ballistic_new = _ballistic.param_ballistic_new

def density1d_nonpara00(EFermi, Enm, alpha_nm, ems_nm, temp):
    return _ballistic.density1d_nonpara00(EFermi, Enm, alpha_nm, ems_nm, temp)
density1d_nonpara00 = _ballistic.density1d_nonpara00

def alphaNP00(Eg, ems):
    return _ballistic.alphaNP00(Eg, ems)
alphaNP00 = _ballistic.alphaNP00

def gamma_nm00(alpha, ems, W1, W2, n, m):
    return _ballistic.gamma_nm00(alpha, ems, W1, W2, n, m)
gamma_nm00 = _ballistic.gamma_nm00

def E_nm0(alpha, gamma_nm):
    return _ballistic.E_nm0(alpha, gamma_nm)
E_nm0 = _ballistic.E_nm0

def alpha_nm0(alpha, gamma_nm):
    return _ballistic.alpha_nm0(alpha, gamma_nm)
alpha_nm0 = _ballistic.alpha_nm0

def ems_nm0(ems, gamma_nm):
    return _ballistic.ems_nm0(ems, gamma_nm)
ems_nm0 = _ballistic.ems_nm0
# This file is compatible with both classic and new-style classes.


