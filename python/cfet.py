# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cfet')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cfet')
    _cfet = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cfet', [dirname(__file__)])
        except ImportError:
            import _cfet
            return _cfet
        try:
            _mod = imp.load_module('_cfet', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cfet = swig_import_helper()
    del swig_import_helper
else:
    import _cfet
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class material_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, material_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, material_type, name)
    __repr__ = _swig_repr
    __swig_setmethods__["epsilon"] = _cfet.material_type_epsilon_set
    __swig_getmethods__["epsilon"] = _cfet.material_type_epsilon_get
    if _newclass:
        epsilon = _swig_property(_cfet.material_type_epsilon_get, _cfet.material_type_epsilon_set)
    __swig_setmethods__["conductivity"] = _cfet.material_type_conductivity_set
    __swig_getmethods__["conductivity"] = _cfet.material_type_conductivity_get
    if _newclass:
        conductivity = _swig_property(_cfet.material_type_conductivity_get, _cfet.material_type_conductivity_set)
    __swig_setmethods__["id"] = _cfet.material_type_id_set
    __swig_getmethods__["id"] = _cfet.material_type_id_get
    if _newclass:
        id = _swig_property(_cfet.material_type_id_get, _cfet.material_type_id_set)

    def __init__(self):
        this = _cfet.new_material_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cfet.delete_material_type
    __del__ = lambda self: None
material_type_swigregister = _cfet.material_type_swigregister
material_type_swigregister(material_type)


def read_input_vars():
    return _cfet.read_input_vars()
read_input_vars = _cfet.read_input_vars

def write_output_vars():
    return _cfet.write_output_vars()
write_output_vars = _cfet.write_output_vars

def destroy_input_vars():
    return _cfet.destroy_input_vars()
destroy_input_vars = _cfet.destroy_input_vars

def destroy_output_vars():
    return _cfet.destroy_output_vars()
destroy_output_vars = _cfet.destroy_output_vars

def Ids_cMESFET(arg1, arg2):
    return _cfet.Ids_cMESFET(arg1, arg2)
Ids_cMESFET = _cfet.Ids_cMESFET

def Ids_cMESFET_aux(arg_scm_0, arg_scm_1):
    return _cfet.Ids_cMESFET_aux(arg_scm_0, arg_scm_1)
Ids_cMESFET_aux = _cfet.Ids_cMESFET_aux

def Ids_cMOSFET(arg1, arg2):
    return _cfet.Ids_cMOSFET(arg1, arg2)
Ids_cMOSFET = _cfet.Ids_cMOSFET

def Ids_cMOSFET_aux(arg_scm_0, arg_scm_1):
    return _cfet.Ids_cMOSFET_aux(arg_scm_0, arg_scm_1)
Ids_cMOSFET_aux = _cfet.Ids_cMOSFET_aux

def export_external_functions():
    return _cfet.export_external_functions()
export_external_functions = _cfet.export_external_functions

def material_type_input(so, o):
    return _cfet.material_type_input(so, o)
material_type_input = _cfet.material_type_input

def material_type_copy(o0, o):
    return _cfet.material_type_copy(o0, o)
material_type_copy = _cfet.material_type_copy

def material_type_equal(o0, o):
    return _cfet.material_type_equal(o0, o)
material_type_equal = _cfet.material_type_equal

def material_type_destroy(o):
    return _cfet.material_type_destroy(o)
material_type_destroy = _cfet.material_type_destroy
class param_cMOSFET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_cMOSFET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_cMOSFET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radius"] = _cfet.param_cMOSFET_radius_set
    __swig_getmethods__["radius"] = _cfet.param_cMOSFET_radius_get
    if _newclass:
        radius = _swig_property(_cfet.param_cMOSFET_radius_get, _cfet.param_cMOSFET_radius_set)
    __swig_setmethods__["Lg"] = _cfet.param_cMOSFET_Lg_set
    __swig_getmethods__["Lg"] = _cfet.param_cMOSFET_Lg_get
    if _newclass:
        Lg = _swig_property(_cfet.param_cMOSFET_Lg_get, _cfet.param_cMOSFET_Lg_set)
    __swig_setmethods__["eps_semi"] = _cfet.param_cMOSFET_eps_semi_set
    __swig_getmethods__["eps_semi"] = _cfet.param_cMOSFET_eps_semi_get
    if _newclass:
        eps_semi = _swig_property(_cfet.param_cMOSFET_eps_semi_get, _cfet.param_cMOSFET_eps_semi_set)
    __swig_setmethods__["Rs"] = _cfet.param_cMOSFET_Rs_set
    __swig_getmethods__["Rs"] = _cfet.param_cMOSFET_Rs_get
    if _newclass:
        Rs = _swig_property(_cfet.param_cMOSFET_Rs_get, _cfet.param_cMOSFET_Rs_set)
    __swig_setmethods__["Rd"] = _cfet.param_cMOSFET_Rd_set
    __swig_getmethods__["Rd"] = _cfet.param_cMOSFET_Rd_get
    if _newclass:
        Rd = _swig_property(_cfet.param_cMOSFET_Rd_get, _cfet.param_cMOSFET_Rd_set)
    __swig_setmethods__["Cox"] = _cfet.param_cMOSFET_Cox_set
    __swig_getmethods__["Cox"] = _cfet.param_cMOSFET_Cox_get
    if _newclass:
        Cox = _swig_property(_cfet.param_cMOSFET_Cox_get, _cfet.param_cMOSFET_Cox_set)
    __swig_setmethods__["temp"] = _cfet.param_cMOSFET_temp_set
    __swig_getmethods__["temp"] = _cfet.param_cMOSFET_temp_get
    if _newclass:
        temp = _swig_property(_cfet.param_cMOSFET_temp_get, _cfet.param_cMOSFET_temp_set)
    __swig_setmethods__["ni"] = _cfet.param_cMOSFET_ni_set
    __swig_getmethods__["ni"] = _cfet.param_cMOSFET_ni_get
    if _newclass:
        ni = _swig_property(_cfet.param_cMOSFET_ni_get, _cfet.param_cMOSFET_ni_set)
    __swig_setmethods__["dphi"] = _cfet.param_cMOSFET_dphi_set
    __swig_getmethods__["dphi"] = _cfet.param_cMOSFET_dphi_get
    if _newclass:
        dphi = _swig_property(_cfet.param_cMOSFET_dphi_get, _cfet.param_cMOSFET_dphi_set)
    __swig_setmethods__["tox"] = _cfet.param_cMOSFET_tox_set
    __swig_getmethods__["tox"] = _cfet.param_cMOSFET_tox_get
    if _newclass:
        tox = _swig_property(_cfet.param_cMOSFET_tox_get, _cfet.param_cMOSFET_tox_set)
    __swig_setmethods__["eps_ox"] = _cfet.param_cMOSFET_eps_ox_set
    __swig_getmethods__["eps_ox"] = _cfet.param_cMOSFET_eps_ox_get
    if _newclass:
        eps_ox = _swig_property(_cfet.param_cMOSFET_eps_ox_get, _cfet.param_cMOSFET_eps_ox_set)
    __swig_setmethods__["mue"] = _cfet.param_cMOSFET_mue_set
    __swig_getmethods__["mue"] = _cfet.param_cMOSFET_mue_get
    if _newclass:
        mue = _swig_property(_cfet.param_cMOSFET_mue_get, _cfet.param_cMOSFET_mue_set)

    def __init__(self):
        this = _cfet.new_param_cMOSFET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cfet.delete_param_cMOSFET
    __del__ = lambda self: None
param_cMOSFET_swigregister = _cfet.param_cMOSFET_swigregister
param_cMOSFET_swigregister(param_cMOSFET)
cvar = _cfet.cvar

class param_cMESFET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_cMESFET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_cMESFET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radius"] = _cfet.param_cMESFET_radius_set
    __swig_getmethods__["radius"] = _cfet.param_cMESFET_radius_get
    if _newclass:
        radius = _swig_property(_cfet.param_cMESFET_radius_get, _cfet.param_cMESFET_radius_set)
    __swig_setmethods__["Lg"] = _cfet.param_cMESFET_Lg_set
    __swig_getmethods__["Lg"] = _cfet.param_cMESFET_Lg_get
    if _newclass:
        Lg = _swig_property(_cfet.param_cMESFET_Lg_get, _cfet.param_cMESFET_Lg_set)
    __swig_setmethods__["eps_semi"] = _cfet.param_cMESFET_eps_semi_set
    __swig_getmethods__["eps_semi"] = _cfet.param_cMESFET_eps_semi_get
    if _newclass:
        eps_semi = _swig_property(_cfet.param_cMESFET_eps_semi_get, _cfet.param_cMESFET_eps_semi_set)
    __swig_setmethods__["Rs"] = _cfet.param_cMESFET_Rs_set
    __swig_getmethods__["Rs"] = _cfet.param_cMESFET_Rs_get
    if _newclass:
        Rs = _swig_property(_cfet.param_cMESFET_Rs_get, _cfet.param_cMESFET_Rs_set)
    __swig_setmethods__["Rd"] = _cfet.param_cMESFET_Rd_set
    __swig_getmethods__["Rd"] = _cfet.param_cMESFET_Rd_get
    if _newclass:
        Rd = _swig_property(_cfet.param_cMESFET_Rd_get, _cfet.param_cMESFET_Rd_set)
    __swig_setmethods__["Cox"] = _cfet.param_cMESFET_Cox_set
    __swig_getmethods__["Cox"] = _cfet.param_cMESFET_Cox_get
    if _newclass:
        Cox = _swig_property(_cfet.param_cMESFET_Cox_get, _cfet.param_cMESFET_Cox_set)
    __swig_setmethods__["temp"] = _cfet.param_cMESFET_temp_set
    __swig_getmethods__["temp"] = _cfet.param_cMESFET_temp_get
    if _newclass:
        temp = _swig_property(_cfet.param_cMESFET_temp_get, _cfet.param_cMESFET_temp_set)
    __swig_setmethods__["ni"] = _cfet.param_cMESFET_ni_set
    __swig_getmethods__["ni"] = _cfet.param_cMESFET_ni_get
    if _newclass:
        ni = _swig_property(_cfet.param_cMESFET_ni_get, _cfet.param_cMESFET_ni_set)
    __swig_setmethods__["dphi"] = _cfet.param_cMESFET_dphi_set
    __swig_getmethods__["dphi"] = _cfet.param_cMESFET_dphi_get
    if _newclass:
        dphi = _swig_property(_cfet.param_cMESFET_dphi_get, _cfet.param_cMESFET_dphi_set)
    __swig_setmethods__["tox"] = _cfet.param_cMESFET_tox_set
    __swig_getmethods__["tox"] = _cfet.param_cMESFET_tox_get
    if _newclass:
        tox = _swig_property(_cfet.param_cMESFET_tox_get, _cfet.param_cMESFET_tox_set)
    __swig_setmethods__["eps_ox"] = _cfet.param_cMESFET_eps_ox_set
    __swig_getmethods__["eps_ox"] = _cfet.param_cMESFET_eps_ox_get
    if _newclass:
        eps_ox = _swig_property(_cfet.param_cMESFET_eps_ox_get, _cfet.param_cMESFET_eps_ox_set)
    __swig_setmethods__["mue"] = _cfet.param_cMESFET_mue_set
    __swig_getmethods__["mue"] = _cfet.param_cMESFET_mue_get
    if _newclass:
        mue = _swig_property(_cfet.param_cMESFET_mue_get, _cfet.param_cMESFET_mue_set)
    __swig_setmethods__["Nd"] = _cfet.param_cMESFET_Nd_set
    __swig_getmethods__["Nd"] = _cfet.param_cMESFET_Nd_get
    if _newclass:
        Nd = _swig_property(_cfet.param_cMESFET_Nd_get, _cfet.param_cMESFET_Nd_set)
    __swig_setmethods__["Vbi"] = _cfet.param_cMESFET_Vbi_set
    __swig_getmethods__["Vbi"] = _cfet.param_cMESFET_Vbi_get
    if _newclass:
        Vbi = _swig_property(_cfet.param_cMESFET_Vbi_get, _cfet.param_cMESFET_Vbi_set)

    def __init__(self):
        this = _cfet.new_param_cMESFET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cfet.delete_param_cMESFET
    __del__ = lambda self: None
param_cMESFET_swigregister = _cfet.param_cMESFET_swigregister
param_cMESFET_swigregister(param_cMESFET)


def param_cMOSFET_new():
    return _cfet.param_cMOSFET_new()
param_cMOSFET_new = _cfet.param_cMOSFET_new

def param_cMESFET_new():
    return _cfet.param_cMESFET_new()
param_cMESFET_new = _cfet.param_cMESFET_new

def Ids_cMOS(Vds, Vgs, p):
    return _cfet.Ids_cMOS(Vds, Vgs, p)
Ids_cMOS = _cfet.Ids_cMOS
# This file is compatible with both classic and new-style classes.


