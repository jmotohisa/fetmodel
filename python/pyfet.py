# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pyfet')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pyfet')
    _pyfet = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyfet', [dirname(__file__)])
        except ImportError:
            import _pyfet
            return _pyfet
        try:
            _mod = imp.load_module('_pyfet', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pyfet = swig_import_helper()
    del swig_import_helper
else:
    import _pyfet
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class param_cMOSFET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_cMOSFET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_cMOSFET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radius"] = _pyfet.param_cMOSFET_radius_set
    __swig_getmethods__["radius"] = _pyfet.param_cMOSFET_radius_get
    if _newclass:
        radius = _swig_property(_pyfet.param_cMOSFET_radius_get, _pyfet.param_cMOSFET_radius_set)
    __swig_setmethods__["Lg"] = _pyfet.param_cMOSFET_Lg_set
    __swig_getmethods__["Lg"] = _pyfet.param_cMOSFET_Lg_get
    if _newclass:
        Lg = _swig_property(_pyfet.param_cMOSFET_Lg_get, _pyfet.param_cMOSFET_Lg_set)
    __swig_setmethods__["eps_semi"] = _pyfet.param_cMOSFET_eps_semi_set
    __swig_getmethods__["eps_semi"] = _pyfet.param_cMOSFET_eps_semi_get
    if _newclass:
        eps_semi = _swig_property(_pyfet.param_cMOSFET_eps_semi_get, _pyfet.param_cMOSFET_eps_semi_set)
    __swig_setmethods__["Rs"] = _pyfet.param_cMOSFET_Rs_set
    __swig_getmethods__["Rs"] = _pyfet.param_cMOSFET_Rs_get
    if _newclass:
        Rs = _swig_property(_pyfet.param_cMOSFET_Rs_get, _pyfet.param_cMOSFET_Rs_set)
    __swig_setmethods__["Rd"] = _pyfet.param_cMOSFET_Rd_set
    __swig_getmethods__["Rd"] = _pyfet.param_cMOSFET_Rd_get
    if _newclass:
        Rd = _swig_property(_pyfet.param_cMOSFET_Rd_get, _pyfet.param_cMOSFET_Rd_set)
    __swig_setmethods__["Cox"] = _pyfet.param_cMOSFET_Cox_set
    __swig_getmethods__["Cox"] = _pyfet.param_cMOSFET_Cox_get
    if _newclass:
        Cox = _swig_property(_pyfet.param_cMOSFET_Cox_get, _pyfet.param_cMOSFET_Cox_set)
    __swig_setmethods__["temp"] = _pyfet.param_cMOSFET_temp_set
    __swig_getmethods__["temp"] = _pyfet.param_cMOSFET_temp_get
    if _newclass:
        temp = _swig_property(_pyfet.param_cMOSFET_temp_get, _pyfet.param_cMOSFET_temp_set)
    __swig_setmethods__["ni"] = _pyfet.param_cMOSFET_ni_set
    __swig_getmethods__["ni"] = _pyfet.param_cMOSFET_ni_get
    if _newclass:
        ni = _swig_property(_pyfet.param_cMOSFET_ni_get, _pyfet.param_cMOSFET_ni_set)
    __swig_setmethods__["dphi"] = _pyfet.param_cMOSFET_dphi_set
    __swig_getmethods__["dphi"] = _pyfet.param_cMOSFET_dphi_get
    if _newclass:
        dphi = _swig_property(_pyfet.param_cMOSFET_dphi_get, _pyfet.param_cMOSFET_dphi_set)
    __swig_setmethods__["tox"] = _pyfet.param_cMOSFET_tox_set
    __swig_getmethods__["tox"] = _pyfet.param_cMOSFET_tox_get
    if _newclass:
        tox = _swig_property(_pyfet.param_cMOSFET_tox_get, _pyfet.param_cMOSFET_tox_set)
    __swig_setmethods__["eps_ox"] = _pyfet.param_cMOSFET_eps_ox_set
    __swig_getmethods__["eps_ox"] = _pyfet.param_cMOSFET_eps_ox_get
    if _newclass:
        eps_ox = _swig_property(_pyfet.param_cMOSFET_eps_ox_get, _pyfet.param_cMOSFET_eps_ox_set)
    __swig_setmethods__["mue"] = _pyfet.param_cMOSFET_mue_set
    __swig_getmethods__["mue"] = _pyfet.param_cMOSFET_mue_get
    if _newclass:
        mue = _swig_property(_pyfet.param_cMOSFET_mue_get, _pyfet.param_cMOSFET_mue_set)

    def __init__(self):
        this = _pyfet.new_param_cMOSFET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyfet.delete_param_cMOSFET
    __del__ = lambda self: None
param_cMOSFET_swigregister = _pyfet.param_cMOSFET_swigregister
param_cMOSFET_swigregister(param_cMOSFET)

class param_cMESFET(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_cMESFET, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_cMESFET, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radius"] = _pyfet.param_cMESFET_radius_set
    __swig_getmethods__["radius"] = _pyfet.param_cMESFET_radius_get
    if _newclass:
        radius = _swig_property(_pyfet.param_cMESFET_radius_get, _pyfet.param_cMESFET_radius_set)
    __swig_setmethods__["Lg"] = _pyfet.param_cMESFET_Lg_set
    __swig_getmethods__["Lg"] = _pyfet.param_cMESFET_Lg_get
    if _newclass:
        Lg = _swig_property(_pyfet.param_cMESFET_Lg_get, _pyfet.param_cMESFET_Lg_set)
    __swig_setmethods__["eps_semi"] = _pyfet.param_cMESFET_eps_semi_set
    __swig_getmethods__["eps_semi"] = _pyfet.param_cMESFET_eps_semi_get
    if _newclass:
        eps_semi = _swig_property(_pyfet.param_cMESFET_eps_semi_get, _pyfet.param_cMESFET_eps_semi_set)
    __swig_setmethods__["Rs"] = _pyfet.param_cMESFET_Rs_set
    __swig_getmethods__["Rs"] = _pyfet.param_cMESFET_Rs_get
    if _newclass:
        Rs = _swig_property(_pyfet.param_cMESFET_Rs_get, _pyfet.param_cMESFET_Rs_set)
    __swig_setmethods__["Rd"] = _pyfet.param_cMESFET_Rd_set
    __swig_getmethods__["Rd"] = _pyfet.param_cMESFET_Rd_get
    if _newclass:
        Rd = _swig_property(_pyfet.param_cMESFET_Rd_get, _pyfet.param_cMESFET_Rd_set)
    __swig_setmethods__["Nd"] = _pyfet.param_cMESFET_Nd_set
    __swig_getmethods__["Nd"] = _pyfet.param_cMESFET_Nd_get
    if _newclass:
        Nd = _swig_property(_pyfet.param_cMESFET_Nd_get, _pyfet.param_cMESFET_Nd_set)
    __swig_setmethods__["Vbi"] = _pyfet.param_cMESFET_Vbi_set
    __swig_getmethods__["Vbi"] = _pyfet.param_cMESFET_Vbi_get
    if _newclass:
        Vbi = _swig_property(_pyfet.param_cMESFET_Vbi_get, _pyfet.param_cMESFET_Vbi_set)

    def __init__(self):
        this = _pyfet.new_param_cMESFET()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyfet.delete_param_cMESFET
    __del__ = lambda self: None
param_cMESFET_swigregister = _pyfet.param_cMESFET_swigregister
param_cMESFET_swigregister(param_cMESFET)


def Q_cMOSFET(Vgs, p):
    return _pyfet.Q_cMOSFET(Vgs, p)
Q_cMOSFET = _pyfet.Q_cMOSFET

def Qapprox_cMOSFET(Vgs, p):
    return _pyfet.Qapprox_cMOSFET(Vgs, p)
Qapprox_cMOSFET = _pyfet.Qapprox_cMOSFET

def Ids_cMOSFET(Vds, Vgs, p):
    return _pyfet.Ids_cMOSFET(Vds, Vgs, p)
Ids_cMOSFET = _pyfet.Ids_cMOSFET

def Ids_cMOSFET_R(Vds, Vgs, cMOS):
    return _pyfet.Ids_cMOSFET_R(Vds, Vgs, cMOS)
Ids_cMOSFET_R = _pyfet.Ids_cMOSFET_R

def Ids0_cMOSFET(Vds, Vgs, p):
    return _pyfet.Ids0_cMOSFET(Vds, Vgs, p)
Ids0_cMOSFET = _pyfet.Ids0_cMOSFET

def Ids0_cMOSFET_R(Vds, Vgs, p):
    return _pyfet.Ids0_cMOSFET_R(Vds, Vgs, p)
Ids0_cMOSFET_R = _pyfet.Ids0_cMOSFET_R

def Ids_cMESFET(Vds, Vgs, cMES):
    return _pyfet.Ids_cMESFET(Vds, Vgs, cMES)
Ids_cMESFET = _pyfet.Ids_cMESFET

def Ids_cMESFET_R(Vds, Vgs, cMES):
    return _pyfet.Ids_cMESFET_R(Vds, Vgs, cMES)
Ids_cMESFET_R = _pyfet.Ids_cMESFET_R
class param_density1d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_density1d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_density1d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["temp"] = _pyfet.param_density1d_temp_set
    __swig_getmethods__["temp"] = _pyfet.param_density1d_temp_get
    if _newclass:
        temp = _swig_property(_pyfet.param_density1d_temp_get, _pyfet.param_density1d_temp_set)
    __swig_setmethods__["EFermi"] = _pyfet.param_density1d_EFermi_set
    __swig_getmethods__["EFermi"] = _pyfet.param_density1d_EFermi_get
    if _newclass:
        EFermi = _swig_property(_pyfet.param_density1d_EFermi_get, _pyfet.param_density1d_EFermi_set)
    __swig_setmethods__["Enm"] = _pyfet.param_density1d_Enm_set
    __swig_getmethods__["Enm"] = _pyfet.param_density1d_Enm_get
    if _newclass:
        Enm = _swig_property(_pyfet.param_density1d_Enm_get, _pyfet.param_density1d_Enm_set)
    __swig_setmethods__["alphanm"] = _pyfet.param_density1d_alphanm_set
    __swig_getmethods__["alphanm"] = _pyfet.param_density1d_alphanm_get
    if _newclass:
        alphanm = _swig_property(_pyfet.param_density1d_alphanm_get, _pyfet.param_density1d_alphanm_set)
    __swig_setmethods__["emsnm"] = _pyfet.param_density1d_emsnm_set
    __swig_getmethods__["emsnm"] = _pyfet.param_density1d_emsnm_get
    if _newclass:
        emsnm = _swig_property(_pyfet.param_density1d_emsnm_get, _pyfet.param_density1d_emsnm_set)

    def __init__(self):
        this = _pyfet.new_param_density1d()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyfet.delete_param_density1d
    __del__ = lambda self: None
param_density1d_swigregister = _pyfet.param_density1d_swigregister
param_density1d_swigregister(param_density1d)

class param_density1d_rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_density1d_rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_density1d_rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["alpha"] = _pyfet.param_density1d_rect_alpha_set
    __swig_getmethods__["alpha"] = _pyfet.param_density1d_rect_alpha_get
    if _newclass:
        alpha = _swig_property(_pyfet.param_density1d_rect_alpha_get, _pyfet.param_density1d_rect_alpha_set)
    __swig_setmethods__["ems"] = _pyfet.param_density1d_rect_ems_set
    __swig_getmethods__["ems"] = _pyfet.param_density1d_rect_ems_get
    if _newclass:
        ems = _swig_property(_pyfet.param_density1d_rect_ems_get, _pyfet.param_density1d_rect_ems_set)
    __swig_setmethods__["temp"] = _pyfet.param_density1d_rect_temp_set
    __swig_getmethods__["temp"] = _pyfet.param_density1d_rect_temp_get
    if _newclass:
        temp = _swig_property(_pyfet.param_density1d_rect_temp_get, _pyfet.param_density1d_rect_temp_set)
    __swig_setmethods__["W1"] = _pyfet.param_density1d_rect_W1_set
    __swig_getmethods__["W1"] = _pyfet.param_density1d_rect_W1_get
    if _newclass:
        W1 = _swig_property(_pyfet.param_density1d_rect_W1_get, _pyfet.param_density1d_rect_W1_set)
    __swig_setmethods__["W2"] = _pyfet.param_density1d_rect_W2_set
    __swig_getmethods__["W2"] = _pyfet.param_density1d_rect_W2_get
    if _newclass:
        W2 = _swig_property(_pyfet.param_density1d_rect_W2_get, _pyfet.param_density1d_rect_W2_set)
    __swig_setmethods__["nmax"] = _pyfet.param_density1d_rect_nmax_set
    __swig_getmethods__["nmax"] = _pyfet.param_density1d_rect_nmax_get
    if _newclass:
        nmax = _swig_property(_pyfet.param_density1d_rect_nmax_get, _pyfet.param_density1d_rect_nmax_set)
    __swig_setmethods__["mmax"] = _pyfet.param_density1d_rect_mmax_set
    __swig_getmethods__["mmax"] = _pyfet.param_density1d_rect_mmax_get
    if _newclass:
        mmax = _swig_property(_pyfet.param_density1d_rect_mmax_get, _pyfet.param_density1d_rect_mmax_set)

    def __init__(self):
        this = _pyfet.new_param_density1d_rect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyfet.delete_param_density1d_rect
    __del__ = lambda self: None
param_density1d_rect_swigregister = _pyfet.param_density1d_rect_swigregister
param_density1d_rect_swigregister(param_density1d_rect)


def Ep_nm_rect1d(ems, W1, W2, n, m):
    return _pyfet.Ep_nm_rect1d(ems, W1, W2, n, m)
Ep_nm_rect1d = _pyfet.Ep_nm_rect1d

def density1d0(EFermi, Enm, ems, temp):
    return _pyfet.density1d0(EFermi, Enm, ems, temp)
density1d0 = _pyfet.density1d0

def density1d_rect1d0(EFermi, ems, temp, W1, W2, n, m):
    return _pyfet.density1d_rect1d0(EFermi, ems, temp, W1, W2, n, m)
density1d_rect1d0 = _pyfet.density1d_rect1d0

def density1d_rect1d_all0(EFermi, ems, temp, W1, W2, nmax, mmax):
    return _pyfet.density1d_rect1d_all0(EFermi, ems, temp, W1, W2, nmax, mmax)
density1d_rect1d_all0 = _pyfet.density1d_rect1d_all0

def density1d_rect1d_all(EFermi, p):
    return _pyfet.density1d_rect1d_all(EFermi, p)
density1d_rect1d_all = _pyfet.density1d_rect1d_all

def density1d_NP0(EFermi, Enm, alpha_nm, ems_nm, temp):
    return _pyfet.density1d_NP0(EFermi, Enm, alpha_nm, ems_nm, temp)
density1d_NP0 = _pyfet.density1d_NP0

def density1d_rect1dNP0(EFermi, alphaNP, ems, temp, W1, W2, n, m):
    return _pyfet.density1d_rect1dNP0(EFermi, alphaNP, ems, temp, W1, W2, n, m)
density1d_rect1dNP0 = _pyfet.density1d_rect1dNP0

def density1d_rect1dNP_all0(EFermi, alphaNP, ems, temp, W1, W2, nmax, mmax):
    return _pyfet.density1d_rect1dNP_all0(EFermi, alphaNP, ems, temp, W1, W2, nmax, mmax)
density1d_rect1dNP_all0 = _pyfet.density1d_rect1dNP_all0

def density1d_all(EFermi, p):
    return _pyfet.density1d_all(EFermi, p)
density1d_all = _pyfet.density1d_all

def density1d_NP(params):
    return _pyfet.density1d_NP(params)
density1d_NP = _pyfet.density1d_NP

def density1d_rec1dNP_all(EFermi, p):
    return _pyfet.density1d_rec1dNP_all(EFermi, p)
density1d_rec1dNP_all = _pyfet.density1d_rec1dNP_all
class param_ballistic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_ballistic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_ballistic, name)
    __repr__ = _swig_repr
    __swig_setmethods__["EFermi"] = _pyfet.param_ballistic_EFermi_set
    __swig_getmethods__["EFermi"] = _pyfet.param_ballistic_EFermi_get
    if _newclass:
        EFermi = _swig_property(_pyfet.param_ballistic_EFermi_get, _pyfet.param_ballistic_EFermi_set)
    __swig_setmethods__["VDS"] = _pyfet.param_ballistic_VDS_set
    __swig_getmethods__["VDS"] = _pyfet.param_ballistic_VDS_get
    if _newclass:
        VDS = _swig_property(_pyfet.param_ballistic_VDS_get, _pyfet.param_ballistic_VDS_set)
    __swig_setmethods__["VGS"] = _pyfet.param_ballistic_VGS_set
    __swig_getmethods__["VGS"] = _pyfet.param_ballistic_VGS_get
    if _newclass:
        VGS = _swig_property(_pyfet.param_ballistic_VGS_get, _pyfet.param_ballistic_VGS_set)
    __swig_setmethods__["alpha_D"] = _pyfet.param_ballistic_alpha_D_set
    __swig_getmethods__["alpha_D"] = _pyfet.param_ballistic_alpha_D_get
    if _newclass:
        alpha_D = _swig_property(_pyfet.param_ballistic_alpha_D_get, _pyfet.param_ballistic_alpha_D_set)
    __swig_setmethods__["alpha_G"] = _pyfet.param_ballistic_alpha_G_set
    __swig_getmethods__["alpha_G"] = _pyfet.param_ballistic_alpha_G_get
    if _newclass:
        alpha_G = _swig_property(_pyfet.param_ballistic_alpha_G_get, _pyfet.param_ballistic_alpha_G_set)
    __swig_setmethods__["Ceff"] = _pyfet.param_ballistic_Ceff_set
    __swig_getmethods__["Ceff"] = _pyfet.param_ballistic_Ceff_get
    if _newclass:
        Ceff = _swig_property(_pyfet.param_ballistic_Ceff_get, _pyfet.param_ballistic_Ceff_set)
    __swig_setmethods__["alpha"] = _pyfet.param_ballistic_alpha_set
    __swig_getmethods__["alpha"] = _pyfet.param_ballistic_alpha_get
    if _newclass:
        alpha = _swig_property(_pyfet.param_ballistic_alpha_get, _pyfet.param_ballistic_alpha_set)
    __swig_setmethods__["ems"] = _pyfet.param_ballistic_ems_set
    __swig_getmethods__["ems"] = _pyfet.param_ballistic_ems_get
    if _newclass:
        ems = _swig_property(_pyfet.param_ballistic_ems_get, _pyfet.param_ballistic_ems_set)
    __swig_setmethods__["temp"] = _pyfet.param_ballistic_temp_set
    __swig_getmethods__["temp"] = _pyfet.param_ballistic_temp_get
    if _newclass:
        temp = _swig_property(_pyfet.param_ballistic_temp_get, _pyfet.param_ballistic_temp_set)
    __swig_setmethods__["W1"] = _pyfet.param_ballistic_W1_set
    __swig_getmethods__["W1"] = _pyfet.param_ballistic_W1_get
    if _newclass:
        W1 = _swig_property(_pyfet.param_ballistic_W1_get, _pyfet.param_ballistic_W1_set)
    __swig_setmethods__["W2"] = _pyfet.param_ballistic_W2_set
    __swig_getmethods__["W2"] = _pyfet.param_ballistic_W2_get
    if _newclass:
        W2 = _swig_property(_pyfet.param_ballistic_W2_get, _pyfet.param_ballistic_W2_set)
    __swig_setmethods__["nmax"] = _pyfet.param_ballistic_nmax_set
    __swig_getmethods__["nmax"] = _pyfet.param_ballistic_nmax_get
    if _newclass:
        nmax = _swig_property(_pyfet.param_ballistic_nmax_get, _pyfet.param_ballistic_nmax_set)
    __swig_setmethods__["mmax"] = _pyfet.param_ballistic_mmax_set
    __swig_getmethods__["mmax"] = _pyfet.param_ballistic_mmax_get
    if _newclass:
        mmax = _swig_property(_pyfet.param_ballistic_mmax_get, _pyfet.param_ballistic_mmax_set)

    def __init__(self):
        this = _pyfet.new_param_ballistic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyfet.delete_param_ballistic
    __del__ = lambda self: None
param_ballistic_swigregister = _pyfet.param_ballistic_swigregister
param_ballistic_swigregister(param_ballistic)

class param_E0(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, param_E0, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, param_E0, name)
    __repr__ = _swig_repr
    __swig_setmethods__["EFermi"] = _pyfet.param_E0_EFermi_set
    __swig_getmethods__["EFermi"] = _pyfet.param_E0_EFermi_get
    if _newclass:
        EFermi = _swig_property(_pyfet.param_E0_EFermi_get, _pyfet.param_E0_EFermi_set)
    __swig_setmethods__["VDS"] = _pyfet.param_E0_VDS_set
    __swig_getmethods__["VDS"] = _pyfet.param_E0_VDS_get
    if _newclass:
        VDS = _swig_property(_pyfet.param_E0_VDS_get, _pyfet.param_E0_VDS_set)
    __swig_setmethods__["VGS"] = _pyfet.param_E0_VGS_set
    __swig_getmethods__["VGS"] = _pyfet.param_E0_VGS_get
    if _newclass:
        VGS = _swig_property(_pyfet.param_E0_VGS_get, _pyfet.param_E0_VGS_set)
    __swig_setmethods__["alpha_D"] = _pyfet.param_E0_alpha_D_set
    __swig_getmethods__["alpha_D"] = _pyfet.param_E0_alpha_D_get
    if _newclass:
        alpha_D = _swig_property(_pyfet.param_E0_alpha_D_get, _pyfet.param_E0_alpha_D_set)
    __swig_setmethods__["alpha_G"] = _pyfet.param_E0_alpha_G_set
    __swig_getmethods__["alpha_G"] = _pyfet.param_E0_alpha_G_get
    if _newclass:
        alpha_G = _swig_property(_pyfet.param_E0_alpha_G_get, _pyfet.param_E0_alpha_G_set)
    __swig_setmethods__["Ceff"] = _pyfet.param_E0_Ceff_set
    __swig_getmethods__["Ceff"] = _pyfet.param_E0_Ceff_get
    if _newclass:
        Ceff = _swig_property(_pyfet.param_E0_Ceff_get, _pyfet.param_E0_Ceff_set)
    __swig_setmethods__["p_density1d_rect"] = _pyfet.param_E0_p_density1d_rect_set
    __swig_getmethods__["p_density1d_rect"] = _pyfet.param_E0_p_density1d_rect_get
    if _newclass:
        p_density1d_rect = _swig_property(_pyfet.param_E0_p_density1d_rect_get, _pyfet.param_E0_p_density1d_rect_set)

    def __init__(self):
        this = _pyfet.new_param_E0()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyfet.delete_param_E0
    __del__ = lambda self: None
param_E0_swigregister = _pyfet.param_E0_swigregister
param_E0_swigregister(param_E0)


def func_for_rootfind_E0_rect1d0(ene0, EFermi, VDS, VGS, alpha_D, alpha_G, Ceff, alpha, ems, temp, W1, W2, nmax, mmax):
    return _pyfet.func_for_rootfind_E0_rect1d0(ene0, EFermi, VDS, VGS, alpha_D, alpha_G, Ceff, alpha, ems, temp, W1, W2, nmax, mmax)
func_for_rootfind_E0_rect1d0 = _pyfet.func_for_rootfind_E0_rect1d0

def func_for_rootfind_E0_rect1d(ene0, p):
    return _pyfet.func_for_rootfind_E0_rect1d(ene0, p)
func_for_rootfind_E0_rect1d = _pyfet.func_for_rootfind_E0_rect1d

def E0_rect1d_root0(EFermi, VDS, VGS, alpha_D, alpha_G, Ceff, alpha, ems, temp, W1, W2, nmax, mmax):
    return _pyfet.E0_rect1d_root0(EFermi, VDS, VGS, alpha_D, alpha_G, Ceff, alpha, ems, temp, W1, W2, nmax, mmax)
E0_rect1d_root0 = _pyfet.E0_rect1d_root0

def E0_rect1d_root(p):
    return _pyfet.E0_rect1d_root(p)
E0_rect1d_root = _pyfet.E0_rect1d_root

def Cox_rect(epsOX, tOX, W1, W2):
    return _pyfet.Cox_rect(epsOX, tOX, W1, W2)
Cox_rect = _pyfet.Cox_rect

def Cc_rect(epsS, W1, W2):
    return _pyfet.Cc_rect(epsS, W1, W2)
Cc_rect = _pyfet.Cc_rect

def Cox_radial(epsOX, tOX, radius):
    return _pyfet.Cox_radial(epsOX, tOX, radius)
Cox_radial = _pyfet.Cox_radial

def param_cMOSFET_new():
    return _pyfet.param_cMOSFET_new()
param_cMOSFET_new = _pyfet.param_cMOSFET_new

def param_cMESFET_new():
    return _pyfet.param_cMESFET_new()
param_cMESFET_new = _pyfet.param_cMESFET_new

def Qapprox_cMOS(in_array, out_array, p):
    return _pyfet.Qapprox_cMOS(in_array, out_array, p)
Qapprox_cMOS = _pyfet.Qapprox_cMOS

def Q_cMOS(in_array, out_array, p):
    return _pyfet.Q_cMOS(in_array, out_array, p)
Q_cMOS = _pyfet.Q_cMOS

def Ids_cMOS(in_array, out_array, Vds, p):
    return _pyfet.Ids_cMOS(in_array, out_array, Vds, p)
Ids_cMOS = _pyfet.Ids_cMOS

def Ids0_cMOS(in_array, out_array, Vds, p):
    return _pyfet.Ids0_cMOS(in_array, out_array, Vds, p)
Ids0_cMOS = _pyfet.Ids0_cMOS

def Ids_cMOS_R(in_array, out_array, Vds, p):
    return _pyfet.Ids_cMOS_R(in_array, out_array, Vds, p)
Ids_cMOS_R = _pyfet.Ids_cMOS_R

def Ids0_cMOS_R(in_array, out_array, Vds, p):
    return _pyfet.Ids0_cMOS_R(in_array, out_array, Vds, p)
Ids0_cMOS_R = _pyfet.Ids0_cMOS_R

def Ids_cMES(in_array, out_array, Vds, p):
    return _pyfet.Ids_cMES(in_array, out_array, Vds, p)
Ids_cMES = _pyfet.Ids_cMES

def Ids_cMES_R(in_array, out_array, Vds, p):
    return _pyfet.Ids_cMES_R(in_array, out_array, Vds, p)
Ids_cMES_R = _pyfet.Ids_cMES_R
# This file is compatible with both classic and new-style classes.


